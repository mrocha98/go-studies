// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bids.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createBid = `-- name: CreateBid :one
INSERT INTO bids (
	product_id, user_id, amount
) VALUES ( $1, $2, $3 )
RETURNING id, product_id, user_id, amount, created_at
`

type CreateBidParams struct {
	ProductID uuid.UUID `db:"product_id" json:"productId"`
	UserID    uuid.UUID `db:"user_id" json:"userId"`
	Amount    float64   `db:"amount" json:"amount"`
}

// CreateBid
//
//	INSERT INTO bids (
//		product_id, user_id, amount
//	) VALUES ( $1, $2, $3 )
//	RETURNING id, product_id, user_id, amount, created_at
func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) (Bid, error) {
	row := q.db.QueryRow(ctx, createBid, arg.ProductID, arg.UserID, arg.Amount)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getBidsByProductId = `-- name: GetBidsByProductId :many
SELECT id, product_id, user_id, amount, created_at FROM bids
WHERE product_id = $1
ORDER BY amount DESC
`

// GetBidsByProductId
//
//	SELECT id, product_id, user_id, amount, created_at FROM bids
//	WHERE product_id = $1
//	ORDER BY amount DESC
func (q *Queries) GetBidsByProductId(ctx context.Context, productID uuid.UUID) ([]Bid, error) {
	rows, err := q.db.Query(ctx, getBidsByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bid
	for rows.Next() {
		var i Bid
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHighestBidByProductId = `-- name: GetHighestBidByProductId :one
SELECT id, product_id, user_id, amount, created_at FROM bids
WHERE product_id = $1
ORDER BY amount DESC
LIMIT 1
`

// GetHighestBidByProductId
//
//	SELECT id, product_id, user_id, amount, created_at FROM bids
//	WHERE product_id = $1
//	ORDER BY amount DESC
//	LIMIT 1
func (q *Queries) GetHighestBidByProductId(ctx context.Context, productID uuid.UUID) (Bid, error) {
	row := q.db.QueryRow(ctx, getHighestBidByProductId, productID)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
