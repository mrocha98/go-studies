// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
	seller_id,
	name,
	description,
	base_price,
	auction_end_at
) VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateProductParams struct {
	SellerID     uuid.UUID `db:"seller_id" json:"sellerId"`
	Name         string    `db:"name" json:"name"`
	Description  string    `db:"description" json:"description"`
	BasePrice    float64   `db:"base_price" json:"basePrice"`
	AuctionEndAt time.Time `db:"auction_end_at" json:"auctionEndAt"`
}

// CreateProduct
//
//	INSERT INTO products (
//		seller_id,
//		name,
//		description,
//		base_price,
//		auction_end_at
//	) VALUES ($1, $2, $3, $4, $5)
//	RETURNING id
func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.SellerID,
		arg.Name,
		arg.Description,
		arg.BasePrice,
		arg.AuctionEndAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getProductById = `-- name: GetProductById :one
SELECT id, seller_id, name, description, base_price, auction_end_at, is_sold, created_at, updated_at FROM products
WHERE id = $1
`

// GetProductById
//
//	SELECT id, seller_id, name, description, base_price, auction_end_at, is_sold, created_at, updated_at FROM products
//	WHERE id = $1
func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.Name,
		&i.Description,
		&i.BasePrice,
		&i.AuctionEndAt,
		&i.IsSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
